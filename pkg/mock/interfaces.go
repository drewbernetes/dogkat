// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../mock/interfaces.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockS3Interface is a mock of S3Interface interface.
type MockS3Interface struct {
	ctrl     *gomock.Controller
	recorder *MockS3InterfaceMockRecorder
}

// MockS3InterfaceMockRecorder is the mock recorder for MockS3Interface.
type MockS3InterfaceMockRecorder struct {
	mock *MockS3Interface
}

// NewMockS3Interface creates a new mock instance.
func NewMockS3Interface(ctrl *gomock.Controller) *MockS3Interface {
	mock := &MockS3Interface{ctrl: ctrl}
	mock.recorder = &MockS3InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Interface) EXPECT() *MockS3InterfaceMockRecorder {
	return m.recorder
}

// PutToS3 mocks base method.
func (m *MockS3Interface) PutToS3(arg0, arg1, arg2 string, arg3 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutToS3", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutToS3 indicates an expected call of PutToS3.
func (mr *MockS3InterfaceMockRecorder) PutToS3(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutToS3", reflect.TypeOf((*MockS3Interface)(nil).PutToS3), arg0, arg1, arg2, arg3)
}
